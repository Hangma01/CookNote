<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cooknote.backend.mappers.CommentMapper">
	<!-- 댓글 조회 -->
	<select id="getComments" resultType="CommentsResponseDTO">
		SELECT C.COMMENT_ID    		AS COMMENT_ID			<!-- 댓글 아이디 -->
			 , C.WRITER_ID     		AS WRITER_ID			<!-- 작성자 아이디 -->
			 , C.CONTENT 	   		AS CONTENT 				<!-- 댓글 컨텐츠 -->
			 , C.CREATE_AT     		AS CREATE_AT			<!-- 댓글 작성일 -->
			 , U.NICKNAME 	   		AS NICKNAME				<!-- 작성자 닉네임 -->
			 , U.PROFILE_IMAGE 	    AS PROFILE_IMAGE		<!-- 작성자 프로필 이미지 -->
			 , COUNT(CC.COMMENT_ID) AS REPLY_COUNT		  	<!-- 리플 카운트 -->
		 FROM COMMENT 		  	 	AS C
		 JOIN USER U
		   ON C.WRITER_ID = U.USER_ID
	LEFT JOIN COMMENT 				AS CC
		   ON C.COMMENT_ID = CC.PARENT_COMMENT_ID
		  AND CC.STATUS = #{statusCommentPublic}
	 	WHERE C.RECIPE_ID = #{recipeId}
		  AND C.PARENT_COMMENT_ID IS NULL
		  AND C.STATUS = #{statusCommentPublic}
	 GROUP BY C.COMMENT_ID
	 		, C.WRITER_ID
	 		, C.CONTENT
	 		, C.CREATE_AT
	 		, U.NICKNAME
	 		, U.PROFILE_IMAGE
	 ORDER BY C.CREATE_AT DESC
	    LIMIT #{size} 
	   OFFSET #{offset}
	</select>
	
	<!-- 댓글 토탈 갯수 -->
	<select id="commentsCount" resultType="int">
		SELECT COUNT(COMMENT_ID)
		  FROM COMMENT
		 WHERE RECIPE_ID = #{recipeId}
		   AND PARENT_COMMENT_ID IS NULL
		   AND STATUS = #{statusCommentPublic}
	</select>
	
	<!-- 리플 페이징 -->
	<select id="getCommentReplies" resultType="CommentRepliesResponseDTO">
		SELECT C.COMMENT_ID    AS COMMENT_ID	<!-- 댓글 아이디 -->
			 , C.WRITER_ID     AS WRITER_ID		<!-- 작성자 아이디 -->
			 , C.CONTENT 	   AS CONTENT 		<!-- 댓글 컨텐츠 -->
			 , C.CREATE_AT     AS CREATE_AT		<!-- 댓글 작성일 -->
			 , U.NICKNAME 	   AS NICKNAME		<!-- 작성자 닉네임 -->
			 , U.PROFILE_IMAGE AS PROFILE_IMAGE	<!-- 작성자 프로필 이미지 -->
		 FROM COMMENT 		   AS C
   INNER JOIN USER 			   AS U
		   ON C.WRITER_ID = U.USER_ID
   INNER JOIN COMMENT 		   AS PC
	  	   ON C.PARENT_COMMENT_ID = PC.COMMENT_ID
	 	WHERE C.PARENT_COMMENT_ID = #{parentCommentId}
	 	  AND C.STATUS = #{statusCommentPublic}   
	 	  AND PC.STATUS = #{statusCommentPublic}  
	 ORDER BY C.CREATE_AT DESC
	    LIMIT #{size} 
	   OFFSET #{offset}
	</select>

	<!-- 리플 토탈 갯수 -->
	<select id="commentRepliesCount" resultType="int">
		SELECT COUNT(C.COMMENT_ID)
		  FROM COMMENT AS C
    INNER JOIN COMMENT AS PC
		    ON C.PARENT_COMMENT_ID = PC.COMMENT_ID
		 WHERE C.PARENT_COMMENT_ID = #{parentCommentId}
		   AND C.STATUS = #{statusCommentPublic} 
	 	   AND PC.STATUS = #{statusCommentPublic}  
	</select>

	<!-- 댓글 추가 - 부모 댓글 조회 -->
	<select id="findParentComment" resultType="Comment">
		SELECT RECIPE_ID			AS RECIPE_ID
			 , PARENT_COMMENT_ID 	AS PARENT_COMMENT_ID
		  FROM COMMENT
		 WHERE COMMENT_ID = #{parentCommentId}
		   AND STATUS = #{statusCommentPublic}
	</select>   
	
	
	<!-- 댓글 추가 -->
	<insert id="commnetInsert">
		INSERT INTO COMMENT (
								 CONTENT 
							   , RECIPE_ID 
							   , WRITER_ID 
							   , PARENT_COMMENT_ID 
		)
		VALUES (
				#{insertDTO.content} 
			  , #{insertDTO.recipeId} 
			  , #{userId} 
			  , #{insertDTO.parentCommentId} 
		)
	</insert>
	
	<!-- 댓글 삭제 -->
	<update id="commentDelete">
		UPDATE COMMENT
		   SET STATUS = #{statusCommentDelete}
		 WHERE COMMENT_ID = #{commentId}
		    OR PARENT_COMMENT_ID = #{commentId}
	</update>
	
	<!-- 레시피 삭제로 인한 댓글 삭제 -->
	<update id="commentDeleteRecipe">
		UPDATE COMMENT
		   SET STATUS = #{statusCommentDelete}
		 WHERE RECIPE_ID = #{recipeId}
	</update>
	
	<!-- 댓글 삭제 - 기존 정보 조회 -->
	<select id="findDeleteComment">
		SELECT WRITER_ID AS WRITER_ID
		  FROM COMMENT
		 WHERE COMMENT_ID = #{commentId}
	</select>
	
	<!-- 댓글 수정 - 기존 정보 조회 -->
	<select id="findUpdateComment">
		SELECT WRITER_ID AS WRITER_ID
		  FROM COMMENT
		 WHERE COMMENT_ID = #{commentId}
		   AND STATUS = #{statusCommentPublic}
	</select>
	
	<!-- 댓글 수정 -->
	<update id="commentUpdate">
		UPDATE COMMENT
		   SET CONTENT = #{updateDTO.content}
		 WHERE COMMENT_ID = #{updateDTO.commentId}
	</update>
	
	<!-- 유저가 작성한 댓글 페이징 -->
	<select id="getCommentUserWrite" resultType="CommentUserWriteResponseDTO">
		SELECT R.RECIPE_ID 	 AS RECIPE_ID				<!-- 레시피 아이디 -->
			 , R.THUMBNAIL	 AS THUMBNAIL				<!-- 레시피 썸네일 -->
			 , R.TITLE	   	 AS TITLE					<!-- 레시피 제목 -->
			 , R.DESCRIPTION AS DESCRIPTION				<!-- 레시피 설명 -->
			 , R.CREATE_AT	 AS CREATE_AT				<!-- 레시피 작성일 -->
			 , C.COMMENT_ID  AS COMMENT_ID				<!-- 댓글 아이디 -->
			 , C.CONTENT 	 AS COMMENT_CONTENT 		<!-- 댓글 컨텐츠 -->
			 , C.CREATE_AT   AS COMMENT_CREATE_AT		<!-- 댓글 작성일 -->
			 , CASE 
			   WHEN C.PARENT_COMMENT_ID IS NULL
			   THEN TRUE
			   ELSE FALSE
			   END           AS IS_PARENT_COMMENT         <!-- 댓글 종류 -->
		 FROM COMMENT 		 AS C
   INNER JOIN RECIPE 		 AS R
		   ON C.RECIPE_ID = R.RECIPE_ID 
	 	WHERE C.WRITER_ID = #{userId}
	 	  AND C.STATUS = #{statusCommentPublic}
	 	  AND (C.PARENT_COMMENT_ID IS NULL
  								OR EXISTS (SELECT 1
  			  							     FROM COMMENT AS PC
  			 							    WHERE PC.COMMENT_ID = C.PARENT_COMMENT_ID
  			   								  AND PC.STATUS != #{statusCommentPrivate}
  										   )
  		      )
	 ORDER BY C.CREATE_AT DESC
	    LIMIT #{size} 
	   OFFSET #{offset}
	</select>
	
	<!-- 유저가 작성한 댓글 수 조회 -->
	<select id="getCommentUserWriteCount" resultType="int">
		SELECT COUNT(C.COMMENT_ID)
		  FROM COMMENT AS C
		 WHERE C.WRITER_ID = #{userId}
	 	   AND C.STATUS = #{statusCommentPublic}
   	 	   AND (C.PARENT_COMMENT_ID IS NULL
							     OR EXISTS (SELECT 1
		  							          FROM COMMENT AS PC
		 							         WHERE PC.COMMENT_ID = C.PARENT_COMMENT_ID
		   								       AND PC.STATUS != #{statusCommentPrivate}
									        )
	           )
	</select>
	
	<!-- 리플총 갯수 조회 -->
	<select id="getRepliesCount" resultType="int">
		SELECT COUNT(C.COMMENT_ID)
		  FROM COMMENT AS C
    INNER JOIN COMMENT AS PC
		    ON C.PARENT_COMMENT_ID = PC.COMMENT_ID
		 WHERE C.RECIPE_ID = #{recipeId}
		   AND C.PARENT_COMMENT_ID IS NOT NULL
		   AND C.STATUS = #{statusCommentPublic}
	 	   AND PC.STATUS = #{statusCommentPublic}  
	</select>
</mapper>
