<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cooknote.backend.mappers.CommentMapper">


	<!-- 댓글 페이징 -->
	<select id="getComments" resultType="CommentsResponseDTO">
		SELECT C.COMMENT_ID    AS COMMENT_ID		<!-- 댓글 아이디 -->
			 , C.WRITER_ID     AS WRITER_ID			<!-- 작성자 아이디 -->
			 , C.CONTENT 	   AS CONTENT 			<!-- 댓글 컨텐츠 -->
			 , C.CREATE_AT     AS CREATE_AT			<!-- 댁슬 작성일 -->
			 , U.NICKNAME 	   AS NICKNAME			<!-- 작성자 닉네임 -->
			 , U.PROFILE_IMAGE AS PROFILE_IMAGE		<!-- 작성자 프로필 이미지 -->
		 FROM COMMENT 		   AS C
		 JOIN USER U
		   ON C.WRITER_ID = U.USER_ID
	 	WHERE RECIPE_ID = #{recipeId}
		  AND PARENT_COMMENT_ID IS NULL
	   	  AND STATUS = #{statusPublic}
	 ORDER BY C.CREATE_AT DESC
	    LIMIT #{size} 
	   OFFSET #{offset}
	</select>
	
	<!-- 댓글 토탈 갯수 -->
	<select id="commentsCount" resultType="int">
		SELECT COUNT(COMMENT_ID)
		  FROM COMMENT
		 WHERE RECIPE_ID = #{recipeId}
		   AND STATUS = #{statusPublic}
		   AND PARENT_COMMENT_ID IS NULL
	</select>
	
	<!-- 리플 페이징 -->
	<select id="getCommentReplies" resultType="CommentRepliesResponseDTO">
		SELECT C.COMMENT_ID    AS COMMENT_ID	<!-- 댓글 아이디 -->
			 , C.WRITER_ID     AS WRITER_ID		<!-- 작성자 아이디 -->
			 , C.CONTENT 	   AS CONTENT 		<!-- 댓글 컨텐츠 -->
			 , C.CREATE_AT     AS CREATE_AT		<!-- 댓글 작성일 -->
			 , U.NICKNAME 	   AS NICKNAME		<!-- 작성자 닉네임 -->
			 , U.PROFILE_IMAGE AS PROFILE_IMAGE	<!-- 작성자 프로필 이미지 -->
		 FROM COMMENT 		   AS C
		 JOIN USER 			   AS U
		   ON C.WRITER_ID = U.USER_ID
	 	WHERE PARENT_COMMENT_ID = #{parentCommentId}
	   	  AND STATUS = #{statusPublic}
	 ORDER BY C.CREATE_AT DESC
	    LIMIT #{size} 
	   OFFSET #{offset}
	</select>

	<!-- 리플 토탈 갯수 -->
	<select id="commentRepliesCount" resultType="int">
		SELECT COUNT(COMMENT_ID)
		  FROM COMMENT
		 WHERE PARENT_COMMENT_ID = #{parentCommentId}
		   AND STATUS = #{statusPublic}
	</select>

	<!-- 댓글 추가 - 부모 댓글 조회 -->
	<select id="findParentComment" resultType="Comment">
		SELECT RECIPE_ID			AS RECIPE_ID
			 , PARENT_COMMENT_ID 	AS PARENT_COMMENT_ID
		  FROM COMMENT
		 WHERE COMMENT_ID = #{parentCommentId}
		   AND STATUS = #{statusPublic}
	</select>   
	
	
	<!-- 댓글 추가 -->
	<insert id="commnetInsert">
		INSERT INTO COMMENT (
								 CONTENT 
							   , RECIPE_ID 
							   , WRITER_ID 
							   , PARENT_COMMENT_ID 
		)
		VALUES (
				#{insertDTO.content} 
			  , #{insertDTO.recipeId} 
			  , #{userId} 
			  , #{insertDTO.parentCommentId} 
		)
	</insert>
	
	<!-- 댓글 삭제 -->
	<update id="commentDelete">
		DELETE
		  FROM COMMENT
		 WHERE COMMENT_ID = #{commentId}
	</update>
	
	<!-- 댓글 수정, 삭제 - 기존 정보 조회 -->
	<select id="findComment">
		SELECT WRITER_ID AS WRITER_ID
		  FROM COMMENT
		 WHERE COMMENT_ID = #{commentId}
		   AND STATUS = #{statusPublic}
	</select>
	
	<!-- 댓글 수정 -->
	<update id="commentUpdate">
		UPDATE COMMENT
		   SET CONTENT = #{updateDTO.content}
		 WHERE COMMENT_ID = #{updateDTO.commentId}
	</update>
	
	<!-- 유저가 작성한 댓글 페이징 -->
	<select id="getCommentUserWrite" resultType="CommentUserWriteResponseDTO">
		SELECT R.RECIPE_ID 	 AS RECIPE_ID				<!-- 레시피 아이디 -->
			 , R.THUMBNAIL	 AS THUMBNAIL				<!-- 레시피 썸네일 -->
			 , R.TITLE	   	 AS TITLE					<!-- 레시피 제목 -->
			 , R.DESCRIPTION AS DESCRIPTION				<!-- 레시피 설명 -->
			 , R.CREATE_AT	 AS CREATE_AT				<!-- 레시피 작성일 -->
			 , C.COMMENT_ID  AS COMMENT_ID				<!-- 댓글 아이디 -->
			 , C.CONTENT 	 AS COMMENT_CONTENT 		<!-- 댓글 컨텐츠 -->
			 , C.CREATE_AT   AS COMMENT_CREATE_AT		<!-- 댓글 작성일 -->
			 , CASE
			   WHEN C.STATUS = #{statusPrivateAdmin}
			   THEN 1
			   ELSE 0
			    END			 AS IS_PRIVATE_ADMIN		<!-- 관리자 삭제 여부 -->
		 FROM COMMENT 		 AS C
		 JOIN RECIPE 		 AS R
		   ON C.RECIPE_ID = R.RECIPE_ID
	 	WHERE C.WRITER_ID = #{userId}
	 ORDER BY C.CREATE_AT DESC
	    LIMIT #{size} 
	   OFFSET #{offset}
	</select>
	
	<!--  -->
	<select id="getCommentUserWriteCount" resultType="int">
		SELECT COUNT(COMMENT_ID)
		  FROM COMMENT
		 WHERE WRITER_ID = #{userId}
	</select>
</mapper>
