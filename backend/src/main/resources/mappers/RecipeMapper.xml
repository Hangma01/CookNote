<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cooknote.backend.mappers.RecipeMapper">

	<resultMap id="RecipeEditResultMap" type="RecipeEditResponseDTO">
	    <result property="title" column="TITLE"/>									<!-- 레시피 제목 -->
	    <result property="description" column="DESCRIPTION"/>						<!-- 레시피 소개 -->
	    <result property="thumbnail" column="THUMBNAIL"/>							<!-- 레시피 썸네일 -->
	    <result property="videoId" column="VIDEO_ID"/>								<!-- 레시피 동영상 아이디 -->
	    <result property="serving" column="SERVING"/>								<!-- 레시피 인원수 -->
	    <result property="duration" column="DURATION"/>								<!-- 레시피 요리 시간 -->
	    <result property="level" column="LEVEL"/>									<!-- 레시피 난이도 -->
	    <result property="tip" column="TIP"/>										<!-- 레시피 팁 -->
	    <result property="status" column="STATUS"/>									<!-- 레시피 상태 -->
	    <result property="categoryCuisineId" column="CATEGORY_CUISINE_ID"/>
	    <result property="categoryPurposeId" column="CATEGORY_PURPOSE_ID"/>
	    <result property="writerId" column="WRITER_ID" />
	    <!-- 중첩된 재료 리스트 -->
	    <collection property="recipeIngredients" ofType="RecipeIngredientResponseDTO">
	    	<result property="ingredientId" column="INGREDIENT_ID"/>
	        <result property="name" column="NAME"/>
	        <result property="quantity" column="QUANTITY"/>
	        <result property="remark" column="REMARK"/>
	    </collection>
	    <!-- 중첩된 시퀀스 리스트 -->
	    <collection property="recipeSeqs" ofType="RecipeSeqResponseDTO">
	        <result property="step" column="RECIPE_SEQ_ID"/>
	        <result property="description" column="SEQ_DESCRIPTION"/>
	        <result property="image" column="IMAGE"/>
	    </collection>
	</resultMap>

	<resultMap id="RecipeDetailResultMap" type="RecipeDetailResponseDTO" extends="RecipeEditResultMap">
	    <result property="createAt" column="CREATE_AT"/> 							
	    <!-- 작성자 정보 -->
	    <result property="writerNickname" column="WRITER_NICKNAME"/>
	    <result property="writerProfileImage" column="WRITER_PROFILE_IMAGE"/>
	    
	    <!-- 좋아요 북마크 여부 -->
	    <result property="isLiked" column="IS_LIKED"/>
	    <result property="isBookmarked" column="IS_BOOKMARKED"/>
	</resultMap>
	
	
	<resultMap id="deleteRecipeImages" type="Recipe">
	    <result property="thumbnail" column="THUMBNAIL"/>							
	    <!-- 중첩된 시퀀스 리스트 -->
	    <collection property="recipeSeqs" ofType="RecipeSeq">
	        <result property="image" column="IMAGE"/>
	    </collection>
	</resultMap>
	
	<!-- 레시피 상세 조회 -->
	<select id="getRecipeDetail" resultMap="RecipeDetailResultMap">
		SELECT R.TITLE 		 		 			AS TITLE					<!-- 레시피 제목 -->
			 , R.DESCRIPTION 		 			AS DESCRIPTION				<!-- 레시피 소개 -->
			 , R.THUMBNAIL 			 			AS THUMBNAIL				<!-- 레시피 썸네일 -->
			 , R.VIDEO_ID 			 			AS VIDEO_ID					<!-- 레시피 동영상 -->
			 , R.SERVING 			 			AS SERVING					<!-- 레시피 인원수 -->
			 , R.DURATION 			 			AS DURATION	 				<!-- 레시피 요리 시간 -->
			 , R.LEVEL	 			 			AS LEVEL					<!-- 레시피 난이도 -->
			 , R.TIP 				 			AS TIP						<!-- 레시피 팁 -->
			 , R.STATUS	 			 			AS STATUS					<!-- 레시피 상태 -->
			 , R.CATEGORY_CUISINE_ID 			AS CATEGORY_CUISINE_ID		<!-- 카테고리 요리 종류 아이디 -->
			 , R.CATEGORY_PURPOSE_ID 			AS CATEGORY_PURPOSE_ID		<!-- 카테고리 요리 목적 아이디 -->
			 , R.WRITER_ID						AS WRITER_ID				<!-- 작성자 아이디 -->
			 , R.CREATE_AT						AS CREATE_AT				<!-- 레시피 작성일 -->
			 , I.RECIPE_INGREDIENT_ID			AS INGREDIENT_ID			<!-- 재료 아이디 -->
			 , I.NAME							AS NAME						<!-- 재료 이름 -->
	         , I.QUANTITY 						AS QUANTITY					<!-- 재료 용량 -->
        	 , I.REMARK							AS REMARK					<!-- 재료 비고 -->
        	 , S.RECIPE_SEQ_ID					AS RECIPE_SEQ_ID			<!-- 요리 순서 -->
        	 , S.DESCRIPTION 					AS SEQ_DESCRIPTION			<!-- 요리 순서별 설명 -->
        	 , S.IMAGE							AS IMAGE					<!-- 요리 순서별 이미지 -->
        	 , U.NICKNAME 						AS WRITER_NICKNAME			<!-- 작성자 닉네임 -->
        	 , U.PROFILE_IMAGE 					AS WRITER_PROFILE_IMAGE		<!-- 작성자 프로필 이미지 -->
			<if test="userId != null">
			 , CASE WHEN RL.USER_ID IS NOT NULL 
			   		THEN TRUE
			   		ELSE FALSE
			    	 END 						AS IS_LIKED					<!-- 레시피 좋아요 여부 (로그인) -->
		     , CASE WHEN RB.USER_ID IS NOT NULL 
		       		THEN TRUE
		       		ELSE FALSE
		        	 END 						AS IS_BOOKMARKED			<!-- 레시피 북마크 여부 (로그인) -->
			</if>
			<if test="userId == null">
			  , FALSE 							AS iS_LIKED					<!-- 레시피 좋아요 여부 (로그아웃) -->
			  , FALSE 							AS iS_BOOKMARKED			<!-- 레시피 북마크 여부 (로그아웃) -->
			</if>
		   FROM RECIPE 							AS R						<!-- 레시피 테이블 -->
      LEFT JOIN RECIPE_INGREDIENT 				AS I 						<!-- 레시피 재료 테이블 -->
      		 ON R.RECIPE_ID = I.RECIPE_ID
      LEFT JOIN RECIPE_SEQ 						AS S 						<!-- 레시피 순서 테이블 -->
      		 ON R.RECIPE_ID = S.RECIPE_ID								
      LEFT JOIN USER 							AS U						<!-- 유저 테이블 -->
      		 ON R.WRITER_ID = U.USER_ID
      <if test="userId != null">
      LEFT JOIN RECIPE_LIKE 					AS RL						<!-- 레시피 좋아요 테이블 -->
      		 ON R.RECIPE_ID = RL.RECIPE_ID
      		AND RL.USER_ID = #{userId}
      LEFT JOIN RECIPE_BOOKMARK 				AS RB						<!-- 레시피 북마크 테이블 -->
      		 ON R.RECIPE_ID = RB.RECIPE_ID
      		AND RB.USER_ID = #{userId} 
      </if>		 
		  WHERE R.RECIPE_ID = #{recipeId}
		    AND R.STATUS != #{statusDelete}
	</select>
	
	<!-- 레시피 조회 - 수정 -->
	<select id="getRecipeForEdit" resultMap="RecipeEditResultMap">
		SELECT R.TITLE 		 		 		AS TITLE					<!-- 레시피 제목 -->
			 , R.DESCRIPTION 		 		AS DESCRIPTION				<!-- 레시피 소개 -->
			 , R.THUMBNAIL 			 		AS THUMBNAIL				<!-- 레시피 썸네일 -->
			 , R.VIDEO_ID 			 		AS VIDEO_ID					<!-- 레시피 동영상 -->
			 , R.SERVING 			 		AS SERVING					<!-- 레시피 인원수 -->
			 , R.DURATION 			 		AS DURATION	 				<!-- 레시피 요리 시간 -->
			 , R.LEVEL	 			 		AS LEVEL					<!-- 레시피 난이도 -->
			 , R.TIP 				 		AS TIP						<!-- 레시피 팁 -->
			 , R.STATUS	 			 		AS STATUS					<!-- 레시피 상태 -->
			 , R.CATEGORY_CUISINE_ID 		AS CATEGORY_CUISINE_ID		<!-- 카테고리 요리 종류 아이디 -->
			 , R.CATEGORY_PURPOSE_ID 		AS CATEGORY_PURPOSE_ID		<!-- 카테고리 요리 목적 아이디 -->
			 , R.WRITER_ID					AS WRITER_ID				<!-- 작성자 아이디 -->
			 , I.RECIPE_INGREDIENT_ID		AS INGREDIENT_ID			<!-- 재료 아이디 -->
			 , I.NAME						AS NAME						<!-- 재료 이름 -->
	         , I.QUANTITY 					AS QUANTITY					<!-- 재료 용량 -->
        	 , I.REMARK						AS REMARK					<!-- 재료 비고 -->
        	 , S.RECIPE_SEQ_ID				AS RECIPE_SEQ_ID			<!-- 요리 순서 -->
        	 , S.DESCRIPTION 				AS SEQ_DESCRIPTION			<!-- 요리 순서별 설명 -->
        	 , S.IMAGE						AS IMAGE					<!-- 요리 순서별 이미지 -->
		   FROM RECIPE 						AS R						<!-- 레시피 테이블 -->
      LEFT JOIN RECIPE_INGREDIENT 			AS I 						<!-- 레시피 재료 테이블 -->
      		 ON R.RECIPE_ID = I.RECIPE_ID								
      LEFT JOIN RECIPE_SEQ 					AS S 						<!-- 레시피 순서 테이블 -->
      		 ON R.RECIPE_ID = S.RECIPE_ID
		  WHERE R.RECIPE_ID = #{recipeId}
		    AND R.WRITER_ID = #{userId}
		    AND R.STATUS != #{statusDelete}
	</select>

	
	<!-- 레시피 저장 -->
	<insert id="save" useGeneratedKeys="true" keyProperty="recipeId">
		INSERT 
		  INTO RECIPE (
					    TITLE
					  , DESCRIPTION
					  , THUMBNAIL
					  , VIDEO_ID
					  , SERVING
				      , DURATION
				      , LEVEL
					  , TIP
					  , STATUS
					  , CATEGORY_CUISINE_ID
					  , CATEGORY_PURPOSE_ID
					  , CREATE_AT
					  , WRITER_ID
		)
		VALUES (
				#{title}
			  , #{description}
			  , #{thumbnail}
			  , #{videoId}
			  , #{serving}
			  , #{duration}
			  , #{level}
			  , #{tip}
			  , #{status}
			  , #{categoryCuisineId}
			  , #{categoryPurposeId}
			  , #{createAt}
			  , #{writerId}
		)
	</insert>
	
	<!-- 레시피 수정 -->
	<update id="update">
		UPDATE RECIPE
		   SET TITLE = #{reqRecipe.title}
		   	 , DESCRIPTION = #{reqRecipe.description}
        	 , THUMBNAIL = #{reqRecipe.thumbnail}
        	 , VIDEO_ID = #{reqRecipe.videoId}
        	 , SERVING = #{reqRecipe.serving}
        	 , DURATION = #{reqRecipe.duration}
        	 , LEVEL = #{reqRecipe.level}
        	 , TIP = #{reqRecipe.tip}
        	 , STATUS = #{reqRecipe.status}
        	 , CATEGORY_CUISINE_ID = #{reqRecipe.categoryCuisineId}
        	 , CATEGORY_PURPOSE_ID = #{reqRecipe.categoryPurposeId}
    	 WHERE RECIPE_ID = #{reqRecipe.recipeId}
    	   AND WRITER_ID = #{reqRecipe.writerId}
    	   AND STATUS != #{statusPrivateAdmin}
	</update>
	
	
	<!-- 레시피 삭제 -->
	<delete id="recipeDelete">
		UPDATE RECIPE AS R
		   SET R.THUMBNAIL = NULL 
		   	 , R.STATUS = #{statusDelete}
		  WHERE RECIPE_ID = #{recipeId}
		    AND WRITER_ID = #{userId}
	</delete>
	
	<!-- 레시피 순서 삭제 -->
	<delete id="recipeSeqDelete">
		UPDATE RECIPE_SEQ AS RS
		   SET RS.IMAGE = NULL 
		  WHERE RECIPE_ID = #{recipeId}
	</delete>
	
	
	<!-- 레시피 좋아요 생성 -->
	<insert id="recipeLikeInsert">
		INSERT 
		INTO RECIPE_LIKE (
						   USER_ID
						 , RECIPE_ID
		)
		VALUES (
				#{userId}
			  , #{recipeId}
		)
	</insert>
	
	<!-- 레시피 좋아요 삭제 -->
	<delete id="recipeLikeDelete">
		DELETE 
		  FROM RECIPE_LIKE
		 WHERE USER_ID = #{userId}
		   AND RECIPE_ID = #{recipeId}
	</delete>
	
	<!-- 레시피 북마크 생성 -->
	<insert id="recipeBookmarkInsert">
		INSERT 
		  INTO RECIPE_BOOKMARK (
							  	 USER_ID
							   , RECIPE_ID
		)
		VALUES (
				#{userId}
			  , #{recipeId}
		)
	</insert>
	
	
	<!-- 레시피 북마크 삭제 -->
	<delete id="recipeBookmarkDelete">
		DELETE 
		  FROM RECIPE_BOOKMARK
		 WHERE USER_ID = #{userId}
		   AND RECIPE_ID = #{recipeId}
	</delete>
	
	
	<!-- 레시피 존재 확인 -->
	<select id="checkRecipe" resultType="Recipe">
		SELECT WRITER_ID AS writerId
		  FROM RECIPE 								
	 	 WHERE RECIPE_ID = #{recipeId}
		   AND STATUS = #{statusPublic}
	</select>
	
	
	<!-- 사용자 본인 레시피 확인 -->
	<select id="checkSelfRecipeExists">
		SELECT EXISTS (
			   SELECT 1 
				 FROM RECIPE 						
				WHERE WRITER_ID = #{userId}
				  AND RECIPE_ID = #{recipeId}
				  AND STATUS IN (
				  		  		 #{statusPublic}
				  	   	       , #{statusPrivate}
				  				)
		)
	</select>

	<!-- 공개한 게시글 요악 정보 가져오기 -->
	<select id="getRecipePublic" resultType="RecipePublicResponseDTO">
		SELECT RECIPE_ID
			 , TITLE
			 , DESCRIPTION
			 , THUMBNAIL
			 , CREATE_AT
		  FROM RECIPE
		 WHERE WRITER_ID = #{accountId}
		   AND STATUS = #{statusPublic}
	  ORDER BY CREATE_AT DESC
		 LIMIT #{size}
		OFFSET #{offset}
	</select>
	
	<!-- 비공개한 게시글 요약 정보 가져오기 -->
	<select id="getRecipePrivate" resultType="RecipePrivateResponseDTO">
		SELECT RECIPE_ID
			 , TITLE
			 , DESCRIPTION
			 , THUMBNAIL
			 , CREATE_AT
		  FROM RECIPE
		 WHERE WRITER_ID = #{userId}
		   AND STATUS = #{statusPrivate}
	  ORDER BY CREATE_AT DESC
		 LIMIT #{size}
		OFFSET #{offset}
	</select>
	
	
	<!-- 공개한 레시피 요약 정보 토탈 갯수 가져오기 -->
	<select id="recipesPublicCount" resultType="int">
		SELECT COUNT(RECIPE_ID)
		  FROM RECIPE
		 WHERE WRITER_ID = #{accountId}
		   AND STATUS = #{statusPublic} 
	</select>
	
	<!-- 비공개한 레시피 요약 정보 토탈 갯수 가져오기 -->
	<select id="recipesPrivateCount" resultType="int">
		SELECT COUNT(RECIPE_ID)
		  FROM RECIPE
		 WHERE WRITER_ID = #{userId}
   		   AND STATUS = #{statusPrivate} 
	</select>

	
	<!-- 좋아요한 레시피 요약 정보 토탈 갯수 가져오기 -->
	<select id="recipeLikeCount" resultType="int">
		SELECT COUNT(RL.RECIPE_ID)
		  FROM RECIPE_LIKE AS RL
   		  JOIN RECIPE      AS R
		    ON RL.RECIPE_ID = R.RECIPE_ID
		 WHERE RL.USER_ID = #{userId}
	</select>
	
	<!-- 북마크한 레시피 요약 정보 토탈 갯수 가져오기 -->
	<select id="recipeBookmarkCount" resultType="int">
		SELECT COUNT(RB.RECIPE_ID)
		  FROM RECIPE_BOOKMARK AS RB
		  JOIN RECIPE   	   AS R
		    ON RB.RECIPE_ID = R.RECIPE_ID
		 WHERE RB.USER_ID = #{userId}
	</select>
	
	<!-- 좋아요한 레시피 요약 정보 가져오기 -->
	<select id="getRecipeLike" resultType="RecipeLikeResponseDTO">
		SELECT R.RECIPE_ID	 AS RECIPE_ID
			 , R.TITLE		 AS TITLE
			 , R.DESCRIPTION AS DESCRIPTION
			 , R.THUMBNAIL	 AS THUMBNAIL
			 , R.CREATE_AT	 AS CREATE_AT
			 , R.STATUS		 AS IS_STATUS
		  FROM RECIPE_LIKE   AS RL
		  JOIN RECIPE 		 AS R
		    ON RL.RECIPE_ID = R.RECIPE_ID
		 WHERE RL.USER_ID = #{userId}
		 ORDER BY RL.CREATE_AT DESC
		 LIMIT #{size}
		OFFSET #{offset}
	</select>
	
	<!-- 북마크한 레시피 요약 정보 가져오기 -->
	<select id="getRecipeBookmark" resultType="RecipeBookmarkResponseDTO">
		SELECT R.RECIPE_ID	   AS RECIPE_ID
			 , R.TITLE		   AS TITLE
			 , R.DESCRIPTION   AS DESCRIPTION
			 , R.THUMBNAIL	   AS THUMBNAIL
			 , R.CREATE_AT	   AS CREATE_AT
			 , R.STATUS		   AS STATUS
		  FROM RECIPE_BOOKMARK AS RB
		  JOIN RECIPE 		   AS R
		    ON RB.RECIPE_ID = R.RECIPE_ID
		 WHERE RB.USER_ID = #{userId}
	  ORDER BY RB.CREATE_AT DESC
		 LIMIT #{size}
		OFFSET #{offset}
	</select>
	
	<!-- 레시피 작성일 -->
	<select id="getRecipeCreateAt" resultType="java.time.LocalDateTime">
		SELECT CREATE_AT
		  FROM RECIPE
		 WHERE RECIPE_ID = #{recipeId}
		   AND WRITER_ID = #{userId}
	</select>
	
	<!-- 레시피 검색 -->
	<select id="getRecipeSearch" resultType="RecipeSearchResponseDTO">
		SELECT R.THUMBNAIL							AS RECIPE_THUMBNAIL			<!-- 레시피 썸네일 -->
			 , R.RECIPE_ID 						 	AS RECIPE_ID 				<!-- 레시피 아이디 -->
			 , R.TITLE 							 	AS RECIPE_TITLE				<!-- 레시피 제목 -->
			 , R.WRITER_ID 							AS WRITER_ID				<!-- 레시피 작성자 -->
			 , U.NICKNAME 						 	AS WRITER_NICKNAME			<!-- 레시피 작성자 닉네임 -->
			 , U.PROFILE_IMAGE 					 	AS WRITER_PROFILE_IMAGE		<!-- 레시피 작성자 프로필 이미지 -->
			 , COUNT(DISTINCT C.COMMENT_ID) 	 	AS RECIPE_COMMENT_COUNT		<!-- 레시피 댓글 수 -->
	    	 , COUNT(DISTINCT RL.RECIPE_LIKE_ID) 	AS RECIPE_LIKE_COUNT		<!-- 레시피 좋아요 수 -->
		  FROM RECIPE 							 	AS R						<!-- 레시피 테이블 -->
	INNER JOIN USER 							 	AS U 						<!-- 유저 테이블 -->
			ON R.WRITER_ID = U.USER_ID
	 LEFT JOIN RECIPE_LIKE 						 	AS RL 						<!-- 레시피 좋아요 테이블 -->
	 		ON R.RECIPE_ID = RL.RECIPE_ID		
	 LEFT JOIN COMMENT 							 	AS C						<!-- 댓글 테이블 --> 
	 		ON R.RECIPE_ID = C.RECIPE_ID
	     WHERE R.STATUS = #{statusRecipePublic} 
	       <if test="keyword != null">
		   AND (
			    R.TITLE LIKE CONCAT('%', #{keyword}, '%')
			 OR R.DESCRIPTION LIKE CONCAT('%', #{keyword}, '%')
			 OR EXISTS (
			            SELECT 1
			              FROM RECIPE_INGREDIENT 	AS RI						<!-- 레시피 재료 테이블 -->
			             WHERE RI.RECIPE_ID = R.RECIPE_ID
			               AND RI.NAME LIKE CONCAT('%', #{keyword}, '%')
			          	)
			    )
		   </if>
		   <if test="categoryCuisineId != 0">
		   AND R.CATEGORY_CUISINE_ID = #{categoryCuisineId}
		   </if>
		   <if test="categoryPurposeId != 0">
		   AND R.CATEGORY_PURPOSE_ID = #{categoryPurposeId}
		   </if> 
	  GROUP BY R.RECIPE_ID
	  		 , R.TITLE
	 		 , R.WRITER_ID
	 		 , U.NICKNAME
	 		 , U.PROFILE_IMAGE 	   
	  <if test="conditionalType == conditionalPopular">
      ORDER BY (
			    COUNT(DISTINCT RL.RECIPE_LIKE_ID) * 0.7 
			    + COUNT(DISTINCT C.COMMENT_ID) * 0.3
      			) DESC
  	  </if>	    
  	  <if test="conditionalType == conditionalLatest">
	  ORDER BY R.CREATE_AT DESC 
	  </if>
	 	 LIMIT #{size}
		OFFSET #{offset}	 
	</select>
	
	<!-- 레시피 검색 카운트 -->
	<select id="getRecipeSearchCount" resultType="int">
  		SELECT COUNT(R.RECIPE_ID)
 		  FROM RECIPE AS R
  	     WHERE R.STATUS = #{statusRecipePublic} 
  	       <if test="keyword != null">
		   AND (
		        R.TITLE LIKE CONCAT('%', #{keyword}, '%')
		        OR R.DESCRIPTION LIKE CONCAT('%', #{keyword}, '%')
		        OR EXISTS (
		          		   SELECT 1 
		          			 FROM RECIPE_INGREDIENT AS RI
		          			WHERE RI.RECIPE_ID = R.RECIPE_ID
		          			  AND RI.NAME LIKE CONCAT('%', #{keyword}, '%')
		        		   )
		        )
		   </if>
		   <if test="categoryCuisineId != 0">
		   AND R.CATEGORY_CUISINE_ID = #{categoryCuisineId}
		   </if>
		   <if test="categoryPurposeId != 0">
		   AND R.CATEGORY_PURPOSE_ID = #{categoryPurposeId}
		   </if>
	</select>
	
	<!-- 레시피 재료 검색 -->
	<select id="getIngredientSearch" resultType="RecipeSearchResponseDTO">
		SELECT R.THUMBNAIL								AS RECIPE_THUMBNAIL			<!-- 레시피 썸네일 -->
			 , R.RECIPE_ID 						 		AS RECIPE_ID 				<!-- 레시피 아이디 -->
			 , R.TITLE 							 		AS RECIPE_TITLE				<!-- 레시피 제목 -->
			 , R.WRITER_ID 								AS WRITER_ID				<!-- 레시피 작성자 -->
			 , U.NICKNAME 						 		AS WRITER_NICKNAME			<!-- 레시피 작성자 닉네임 -->
			 , U.PROFILE_IMAGE 					 		AS WRITER_PROFILE_IMAGE		<!-- 레시피 작성자 프로필 이미지 -->
			 , COUNT(DISTINCT C.COMMENT_ID) 	 		AS RECIPE_COMMENT_COUNT		<!-- 레시피 댓글 수 -->
	    	 , COUNT(DISTINCT RL.RECIPE_LIKE_ID) 		AS RECIPE_LIKE_COUNT		<!-- 레시피 좋아요 수 -->
		  FROM RECIPE 									AS R						<!-- 레시피 테이블 -->
	INNER JOIN USER AS U 
		 	ON R.WRITER_ID = U.USER_ID
	 LEFT JOIN RECIPE_LIKE 								AS RL 						<!-- 레시피 좋아요 테이블 -->
	 		ON R.RECIPE_ID = RL.RECIPE_ID
	 LEFT JOIN COMMENT 									AS C 						<!-- 레시피 댓글 테이블 -->
	 		ON R.RECIPE_ID = C.RECIPE_ID
		 WHERE R.STATUS = #{statusRecipePublic}
		   <if test="!ingredients.isEmpty()">
		   AND R.RECIPE_ID IN (
		    				   SELECT RI.RECIPE_ID
		    					 FROM RECIPE_INGREDIENT AS RI						<!-- 레시피 재료 테이블 -->
		    					WHERE RI.NAME IN <foreach item="ingredient" index="index" collection="ingredients" open="(" separator="," close=")">
		        								 #{ingredient}
		    									 </foreach>
		    					GROUP BY RI.RECIPE_ID
		    				   HAVING COUNT(DISTINCT RI.NAME) = #{ingredientCount}
		   )
		   </if>
	  GROUP BY R.RECIPE_ID
	 	 	 , R.TITLE
	 		 , R.WRITER_ID
	 		 , U.NICKNAME
	 		 , U.PROFILE_IMAGE
	  <if test="conditionalType == conditionalPopular">
      ORDER BY (
			    COUNT(DISTINCT RL.RECIPE_LIKE_ID) * 0.7 
			    + COUNT(DISTINCT C.COMMENT_ID) * 0.3
      			) DESC
  	  </if>	    
  	  <if test="conditionalType == conditionalLatest">
	  ORDER BY R.CREATE_AT DESC 
	  </if>
		 LIMIT #{size}
		OFFSET #{offset}
	</select>
	
	<!-- 레시피 재료 검색 카운트 -->
	<select id="getIngredientSearchCount" resultType="int">
		SELECT COUNT(R.RECIPE_ID)
		  FROM RECIPE 									AS R	<!-- 레시피 테이블 -->
		 WHERE R.STATUS = #{statusRecipePublic}
		   <if test="!ingredients.isEmpty()">
		   AND R.RECIPE_ID IN (
		    				   SELECT RI.RECIPE_ID
		    					 FROM RECIPE_INGREDIENT AS RI	<!-- 레시피 재료 테이블 -->
		    					WHERE RI.NAME IN <foreach item="ingredient" index="index" collection="ingredients" open="(" separator="," close=")">
		        								 #{ingredient}
		    									 </foreach>
		    					GROUP BY RI.RECIPE_ID
		    				   HAVING COUNT(DISTINCT RI.NAME) = #{ingredientCount}
		   )
		   </if>
	</select>
	
	
	<!-- 유저가 팔로우한 유저들의 게시글 -->
	<select id="getRecipesOfFollowingUsers" resultType="RecipeSearchResponseDTO">
		SELECT R.THUMBNAIL               		 AS RECIPE_THUMBNAIL		
	   		 , R.RECIPE_ID               		 AS RECIPE_ID
	   		 , R.TITLE                  		 AS RECIPE_TITLE
	   		 , R.WRITER_ID              		 AS WRITER_ID
	   		 , U.NICKNAME              			 AS WRITER_NICKNAME
	   		 , U.PROFILE_IMAGE          		 AS WRITER_PROFILE_IMAGE
	   		 , COUNT(DISTINCT C.COMMENT_ID)      AS RECIPE_COMMENT_COUNT
	   		 , COUNT(DISTINCT RL.RECIPE_LIKE_ID) AS RECIPE_LIKE_COUNT
		  FROM FOLLOW 							 AS F
	INNER JOIN USER 							 AS U 
			ON F.FOLLOWING_ID = U.USER_ID      
	INNER JOIN RECIPE 							 AS R 
			ON R.WRITER_ID = U.USER_ID        
	 LEFT JOIN COMMENT 							 AS C 
	 		ON R.RECIPE_ID = C.RECIPE_ID
	 LEFT JOIN RECIPE_LIKE 						 AS RL 
	 		ON R.RECIPE_ID = RL.RECIPE_ID
		 WHERE F.FOLLOWER_ID = #{userId}                               
	  	   AND R.STATUS = #{statusRecipePublic}                                  
	  GROUP BY R.RECIPE_ID
	  		 , R.THUMBNAIL
	  		 , R.TITLE
	  		 , R.WRITER_ID
	  		 , U.NICKNAME
	  		 , U.PROFILE_IMAGE
	  ORDER BY R.CREATE_AT DESC
	  	 LIMIT #{size}
		OFFSET #{offset}
	</select>
	
	
	<!-- 유저가 팔로우한 유저들의 게시글 토탈 갯수 -->
	<select id="getRecipesOfFollowingUsersCount" resultType="int">
		SELECT COUNT(DISTINCT R.RECIPE_ID)
		  FROM FOLLOW AS F
	INNER JOIN USER   AS U 
			ON F.FOLLOWING_ID = U.USER_ID      
	INNER JOIN RECIPE AS R 
			ON R.WRITER_ID = U.USER_ID        
		 WHERE F.FOLLOWER_ID = #{userId}                              
	  	   AND R.STATUS = #{statusRecipePublic}                                     
	</select>
	
	<!-- 유저가 팔로우한 유저의 특정 게시글 -->
	<select id="getRecipesByFollowingUser" resultType="RecipeSearchResponseDTO">
		SELECT R.THUMBNAIL               		 AS RECIPE_THUMBNAIL
			 , R.RECIPE_ID               		 AS RECIPE_ID
			 , R.TITLE                  		 AS RECIPE_TITLE
			 , R.WRITER_ID              		 AS WRITER_ID
			 , U.NICKNAME               		 AS WRITER_NICKNAME
			 , U.PROFILE_IMAGE          		 AS WRITER_PROFILE_IMAGE
			 , COUNT(DISTINCT C.COMMENT_ID)      AS RECIPE_COMMENT_COUNT
			 , COUNT(DISTINCT RL.RECIPE_LIKE_ID) AS RECIPE_LIKE_COUNT
		  FROM FOLLOW 							 AS F
	INNER JOIN USER 							 AS U 
			ON F.FOLLOWING_ID = U.USER_ID 
	INNER JOIN RECIPE 							 AS R 
			ON R.WRITER_ID = U.USER_ID
	 LEFT JOIN COMMENT 							 AS C 
	 		ON R.RECIPE_ID = C.RECIPE_ID
	 LEFT JOIN RECIPE_LIKE 						 AS RL 
	 		ON R.RECIPE_ID = RL.RECIPE_ID
		 WHERE F.FOLLOWER_ID = #{userId}                                    
	  	   AND R.STATUS = #{statusRecipePublic}                                   
	  	   AND F.FOLLOWING_ID= #{followingId}
	  GROUP BY R.RECIPE_ID
	  		 , R.THUMBNAIL
	  		 , R.TITLE
	  		 , R.WRITER_ID
	  		 , U.NICKNAME
	  		 , U.PROFILE_IMAGE
	  ORDER BY R.CREATE_AT DESC
	  	 LIMIT #{size}
		OFFSET #{offset}
	</select>
	
	<!-- 유저가 팔로우한 유저의 특정 게시글 토탈 갯수 -->
	<select id="getRecipesByFollowingUserCount" resultType="int">
		SELECT COUNT(DISTINCT R.RECIPE_ID)
		  FROM FOLLOW 							 AS F
	INNER JOIN USER 							 AS U 
			ON F.FOLLOWING_ID = U.USER_ID 
	INNER JOIN RECIPE 							 AS R 
			ON R.WRITER_ID = U.USER_ID
		 WHERE F.FOLLOWER_ID = #{userId}                                    
	  	   AND R.STATUS = #{statusRecipePublic}                                   
	  	   AND F.FOLLOWING_ID= #{followingId}
	</select>
	
 	<!-- 레시피 좋아요한 카운트 가져오기 -->
	<select id="getRecipeLikeCount" resultType="int">
		SELECT COUNT(RECIPE_LIKE_ID)
		  FROM RECIPE_LIKE
		 WHERE RECIPE_ID = #{recipeId}
	</select>
	
	<!-- 회원 탈퇴 시 레시피 삭제 -->
	<update id="recipeDeleteByUserId">
	    UPDATE RECIPE
		   SET THUMBNAIL = NULL,
		       STATUS = #{statusRecipeDelete}
		 WHERE WRITER_ID = #{userId}
	</update>
	
	<!-- 회원 탈퇴 시 레시피 순서 삭제 -->
	<update id="recipeSeqDeleteByUserId">
	    UPDATE RECIPE_SEQ AS RS
	INNER JOIN RECIPE 	  AS R 
	        ON RS.RECIPE_ID = R.RECIPE_ID
   		   SET RS.IMAGE = NULL
 		  WHERE R.WRITER_ID = #{userId}
	</update>
	
	<!-- 추천 레시피 가져오기 -->
	<select id="getRecipeRecommnet">
		SELECT R.THUMBNAIL							AS RECIPE_THUMBNAIL			<!-- 레시피 썸네일 -->
			 , R.RECIPE_ID 						 	AS RECIPE_ID 				<!-- 레시피 아이디 -->
			 , R.TITLE 							 	AS RECIPE_TITLE				<!-- 레시피 제목 -->
		  FROM RECIPE 							 	AS R						<!-- 레시피 테이블 -->
	INNER JOIN USER 							 	AS U 						<!-- 유저 테이블 -->
			ON R.WRITER_ID = U.USER_ID
	 LEFT JOIN RECIPE_LIKE 						 	AS RL 						<!-- 레시피 좋아요 테이블 -->
	 		ON R.RECIPE_ID = RL.RECIPE_ID		
	 LEFT JOIN COMMENT 							 	AS C						<!-- 댓글 테이블 --> 
	 		ON R.RECIPE_ID = C.RECIPE_ID
	     WHERE R.STATUS = #{statusRecipePublic} 
	  GROUP BY R.THUMBNAIL
	  		 , R.RECIPE_ID
	  		 , R.TITLE 	   
      ORDER BY (
			    COUNT(DISTINCT RL.RECIPE_LIKE_ID) * 0.7 
			    + COUNT(DISTINCT C.COMMENT_ID) * 0.3
      			) DESC
	 	 LIMIT #{size}
	</select>
	
	<select id="getSoloMealRecipe" resultType="RecipeCardResponseDTO">
		SELECT R.THUMBNAIL							AS RECIPE_THUMBNAIL			<!-- 레시피 썸네일 -->
			 , R.RECIPE_ID 						 	AS RECIPE_ID 				<!-- 레시피 아이디 -->
			 , R.TITLE 							 	AS RECIPE_TITLE				<!-- 레시피 제목 -->
			 , R.WRITER_ID 							AS WRITER_ID				<!-- 레시피 작성자 -->
			 , U.NICKNAME 						 	AS WRITER_NICKNAME			<!-- 레시피 작성자 닉네임 -->
			 , U.PROFILE_IMAGE 					 	AS WRITER_PROFILE_IMAGE		<!-- 레시피 작성자 프로필 이미지 -->
			 , COUNT(DISTINCT C.COMMENT_ID) 	 	AS RECIPE_COMMENT_COUNT		<!-- 레시피 댓글 수 -->
	    	 , COUNT(DISTINCT RL.RECIPE_LIKE_ID) 	AS RECIPE_LIKE_COUNT		<!-- 레시피 좋아요 수 -->
		  FROM RECIPE 							 	AS R						<!-- 레시피 테이블 -->
	INNER JOIN USER 							 	AS U 						<!-- 유저 테이블 -->
			ON R.WRITER_ID = U.USER_ID
	 LEFT JOIN RECIPE_LIKE 						 	AS RL 						<!-- 레시피 좋아요 테이블 -->
	 		ON R.RECIPE_ID = RL.RECIPE_ID		
	 LEFT JOIN COMMENT 							 	AS C						<!-- 댓글 테이블 --> 
	 		ON R.RECIPE_ID = C.RECIPE_ID
	     WHERE R.STATUS = #{statusRecipePublic} 
		   AND R.CATEGORY_PURPOSE_ID = #{categoryPurposeSoloMeal}
	  GROUP BY R.RECIPE_ID
	  		 , R.TITLE
	 		 , R.WRITER_ID
	 		 , U.NICKNAME
	 		 , U.PROFILE_IMAGE 	   
      ORDER BY (
			    COUNT(DISTINCT RL.RECIPE_LIKE_ID) * 0.7 
			    + COUNT(DISTINCT C.COMMENT_ID) * 0.3
      			) DESC
		 LIMIT #{size}
	</select>
</mapper>

